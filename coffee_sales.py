import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt


# Load Data 

data = pd.read_csv('Coffee_sales.csv')
data['date'] = pd.to_datetime(data['date'])
data['datetime'] = pd.to_datetime(data['datetime'])

#Checking the data 

print(data.head())
print(data.describe())
print(data.info())
print(data.isnull().sum())

# Handling missing values
data['card'] = data['card'].fillna('Unknown')

# Now checking the missing values agian
print(data.isnull().sum())

# Now going to perform Exploratory Data Analysis (EDA)
#Basic Sales Trend Analysis
# Total sales over time
daily_sales = data.groupby('date')['money'].sum().reset_index()
plt.figure(figsize=(12, 6))
sns.lineplot(data=daily_sales, x='date', y='money')
plt.title('Total Sales Over Time')
plt.xlabel('Date')
plt.ylabel('Sales Amount')
plt.show()

#Sales by Coffee Type   (Finding which coffee types are most popular)
coffee_sales = data.groupby('coffee_name')['money'].sum().sort_values()
plt.figure(figsize=(10, 6))
coffee_sales.plot(kind='barh', color='steelblue')
plt.title('Total Revenue by Coffee Type')
plt.xlabel('Revenue')
plt.show()


# Peak hours of sales  (Visualize Sales by hour) 
data['hour'] = data['datetime'].dt.hour
hourly_sales = data.groupby('hour')['money'].sum()
plt.figure(figsize=(10, 6))
hourly_sales.plot(kind='bar', color='steelblue')
plt.title('Hourly Sales Distribution')
plt.xlabel('Hour of Day')
plt.ylabel('Total Sales')
plt.show()

#Sales by Day of the Week
data['day_of_week'] = data['date'].dt.dayofweek
day_sales = data.groupby('day_of_week')['money'].sum()
day_sales.index = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
day_sales.plot(kind='bar', color='steelblue', title='Total Sales by Day of the Week')
plt.show()


# Forecasting Sales Next Day, Next Week, Next Month

#Daily Sales Prediction (Time Series Forecast) with ARIMA
# Daily Sales Aggregation
daily_sales = data.groupby('date')['money'].sum()

# Set frequency for the date index
daily_sales = daily_sales.asfreq('D')
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt

# Fit ARIMA model
model = ARIMA(daily_sales, order=(1, 1, 1))  # Adjust order as needed
arima_model = model.fit()
# Forecast for the next 30 days
forecast = arima_model.forecast(steps=30)

# Plot results
plt.figure(figsize=(12, 6))
plt.plot(daily_sales.index, daily_sales, label='Historical Sales')
plt.plot(forecast.index, forecast, label='Forecasted Sales', color='orange')
plt.title('Sales Forecast for Next 30 Days')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.show()

# Monthly Aggregation for Monthly Forecasting
monthly_sales = data.resample('ME', on='date')['money'].sum()
model_monthly = ARIMA(monthly_sales, order=(1, 1, 1))
monthly_arima_model = model_monthly.fit()
forecast_monthly = monthly_arima_model.forecast(steps=3)  # Adjust steps as needed

#Customer Purchase Analysis (top 10 frequent customer)
customer_purchases = data['card'].value_counts()
customer_purchases.head(10).plot(kind='bar', color='steelblue', title='Top 10 Frequent Customers')
plt.show()

#Average Spend per Customer(top 10 customer by average spend )
avg_spend = data.groupby('card')['money'].mean().sort_values(ascending=False)
avg_spend.head(10).plot(kind='bar', color='steelblue', title='Top 10 Customers by Average Spend')
plt.show()


#ADDING  MACHINE LEARNING :SALES PREDICTION MODEL

# Feature Engineering
data['day_of_week'] = data['date'].dt.dayofweek
data['month'] = data['date'].dt.month
data['hour'] = data['datetime'].dt.hour
data['prev_day_sales'] = data['money'].shift(1)
data = data.dropna()  # Remove NaN values generated by shifting

#Split the data into training and test sets for validation.

from sklearn.model_selection import train_test_split
features = data[['day_of_week', 'month', 'hour', 'prev_day_sales']]
target = data['money']
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)


#Training the Model (e.g., Random Forest Regressor)
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate the Model

from sklearn.metrics import mean_squared_error, r2_score
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')


# Visualize Predictions

plt.figure(figsize=(10, 6))
plt.plot(y_test.values, label="Actual Sales")
plt.plot(y_pred, label="Predicted Sales", alpha=0.7)
plt.legend()
plt.title("Actual vs Predicted Sales")
plt.show()
